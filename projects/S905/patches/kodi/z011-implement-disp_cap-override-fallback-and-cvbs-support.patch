diff -Naurp kodi-17.3-147cec4/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp kodi-17.3-147cec4-patch/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
--- kodi-17.3-147cec4/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp	2017-05-30 11:55:40.000000000 +0300
+++ kodi-17.3-147cec4-patch/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp	2017-05-30 13:57:25.000000000 +0300
@@ -23,6 +23,8 @@
 #include "utils/AMLUtils.h"
 #include "utils/StringUtils.h"
 #include "utils/SysfsUtils.h"
+#include "utils/log.h"
+#include "filesystem/SpecialProtocol.h"
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -153,10 +155,17 @@ bool CEGLNativeTypeAmlogic::SetNativeRes
 #endif
 
   // Don't set the same mode as current
-  RESOLUTION_INFO current_resolution;
+  RESOLUTION_INFO current_resolution, wanted_resolution;
   GetNativeResolution(&current_resolution);
-  if (current_resolution.strId != res.strId ||
-    current_resolution.fRefreshRate != res.fRefreshRate)
+
+  if (res.iScreenWidth == 720 && !aml_IsHdmiConnected())
+    // CVBS modes are 480cvbs or 576cvbs
+    wanted_resolution.strId = std::to_string(res.iScreenHeight) + "cvbs";
+  else
+    wanted_resolution = current_resolution;
+
+  if (wanted_resolution.strId != res.strId ||
+    wanted_resolution.fRefreshRate != res.fRefreshRate)
     result = SetDisplayResolution(res);
 
   DealWithScale(res);
@@ -166,8 +175,38 @@ bool CEGLNativeTypeAmlogic::SetNativeRes
 
 bool CEGLNativeTypeAmlogic::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
 {
-  std::string valstr;
-  SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr);
+  std::string valstr, overridefile, fallbackfile;
+  overridefile = CSpecialProtocol::TranslatePath("special://home/userdata/cvbs_override");
+  fallbackfile = CSpecialProtocol::TranslatePath("special://home/userdata/cvbs_fallback");
+
+  valstr = "";
+
+  if (SysfsUtils::Has(overridefile))
+  {
+    CLog::Log(LOGNOTICE, "Found file 'cvbs_override': Values for display capabilities will override any driver information.");
+    if (SysfsUtils::GetString(overridefile, valstr) < 0)
+      valstr = "";
+    if (valstr.length() == 0)
+      CLog::Log(LOGWARNING, "'cvbs_override' did not contain any information.");
+  }
+
+  if (valstr.length() == 0)
+  {
+    if (SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr) < 0)
+      valstr = "";
+    if (valstr.length() == 0)
+      CLog::Log(LOGWARNING, "Driver did not report any display capabilities.");
+  }
+
+  if ((valstr.length() == 0) && (SysfsUtils::Has(fallbackfile)))
+  {
+    CLog::Log(LOGNOTICE, "Found file 'cvbs_fallback': Fallback values for display capabilities will be used since driver does not deliver any information.");
+    if (SysfsUtils::GetString(fallbackfile, valstr) < 0)
+      valstr = "";
+    if (valstr.length() == 0)
+      CLog::Log(LOGWARNING, "'cvbs_fallback' did not contain any information.");
+  }
+
   std::vector<std::string> probe_str = StringUtils::Split(valstr, "\n");
 
   resolutions.clear();